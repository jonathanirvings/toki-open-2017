Magic


[Description]

This time Mr. Dengklek will play the newest magic trick. In this magic trick, Mr. Dengklek's assistant, Mr. Ganesh prepares N cards numbered from 1 to N. A spectator is invited to the stage to choose K distinct cards out of them. Then Mr. Ganesh must add one more card which is not in the spectator's cards. The spectator's card and Mr. Ganesh's card are shuffled. Then, by looking at the K + 1 cards on the table with random order, Mr. Dengklek must be able to determine the K spectator's card.

Obviously, Mr. Ganesh and Mr. Dengklek must not communicate right after the trick is started, but they can determine their strategy before the trick is started. As Mr. Dengklek's and Mr. Ganesh's magic consultant, you must help them by designing their strategy. This time, Mr. Dengklek and Mr. Ganesh will play this trick Q times with the same value of N and K.


[Task]

There are two files that you must complete. These two files are not allowed to have a global variable with the same name. These two files are also not allowed to communicate by any means (for example, sharing a same variable) except by using the grader.

For assistant.cpp file, you must help Mr. Ganesh by implementing initAssistant and giveClue functions:

- initAssistant(N, K) - This function will be called once by the grader before any trick is played.
  - N : The number of cards in the trick.
  - K : The number of cards chosen by the spectator.
- giveClue(cards) - This function will be called Q times by the grader, once for each trick.
  - cards : A vector with size K. This vector consists of the indices of the spectator's card in the increasing order.
  - This function must return an int indicating the index of the card added by Mr. Ganesh. If the index of the card returned is invalid, you will immediately get Wrong Answer.

For magician.cpp file, you must help Mr. Dengklek by implementing initMagician and findOriginalCards functions:

- initMagician(N, K) - This function will be called once by the grader before any trick is played.
  - N : The number of cards in the trick.
  - K : The number of cards chosen by the spectator.
- findOriginalCards(cards) - This function will be called Q times by the grader, once for each trick.
  - cards : A vector with size K + 1. This vector consists of the indices of the spectator's card and the index of the card returned by giveClue function in increasing order.
  - This function must return a vector. This vector consists of the indices of the spectator's card in the increasing order.


[Example]

If given N = 5, K = 2, Q = 2, then one of the possible scenario is

1. Grader calls initMagician(5, 2) and does not return anything.
2. Grader calls initAssistant(5, 2) dan does not return anything.
3. Grader calls giveClue({1, 2}) and the contestant returns 3.
4. Grader calls findOriginalCards({1, 2, 3}) and the contestant returns {1, 2}.
5. Grader calls giveClue({1, 3}) and the contestant returns 4.
6. Grader calls findOriginalCards({1, 3, 4}) and the contestant returns {1, 3}.

2 tricks have been done and all guesses are correct. The contestant gets Accepted.


[Example]

If given N = 5, K = 2, Q = 2, then one of the possible scenario is

1. Grader calls initMagician(5, 2) and does not return anything.
2. Grader calls initAssistant(5, 2) dan does not return anything.
3. Grader calls giveClue({1, 2}) and the contestant returns 3.
4. Grader calls findOriginalCards({1, 2, 3}) and the contestant returns {1, 2}.
5. Grader calls giveClue({1, 3}) and the contestant returns 2.
6. Grader calls findOriginalCards({1, 2, 3}) and the contestant returns {1, 2}.

Since the last trick is guessed incorrectly, the contestant gets Wrong Answer.


[Subtasks]

For every subtask

- 1 ≤ K < N ≤ 12
- 1 ≤ Q ≤ 500.000
- 2 * K < N

Subtask 1

- The card with index N will not appear at all Q tricks.

Subtask 2

- K = 1

Subtask 3

- N ≤ 6

Subtask 4

- K ≤ 2

Subtask 5

- Q ≤ 3

Subtask 6

- No additional constraint


[Sample Grader]

The provided sample grader will read the input with the following format :
- The first row consists of three integers N, K, and Q separated by space.
- The next Q lines consist of K integers separated by space. The i-th line indicates the indices of the spectator's card in the increasing order.

The provided sample grader will print the output with the following format :
- The first Q lines consist of several integers separated by space. The i-th line consists of integers returned by findOriginalCards(cards) function in the i-th trick.


[Skeleton]

You can download the skeleton for this problem here.
